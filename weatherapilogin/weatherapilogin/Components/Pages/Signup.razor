@page "/signup"
@inject NavigationManager Navigation
@using MongoDB.Driver
@using MongoDB.Bson
@rendermode InteractiveServer
<h3 class="title">Sign Up</h3>

<div class="form-container">
    <input @bind="username" placeholder="Enter your username" class="input-field" />
    <input @bind="password" placeholder="Enter your password" type="password" class="input-field" />
    <button @onclick="RegisterUser" class="btn">Sign Up</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="error">@errorMessage</p>
    }
    else if (!string.IsNullOrEmpty(successMessage))
    {
        <p class="success">@successMessage</p>
    }
</div>

<style>
    .form-container {
        max-width: 400px;
        margin: auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: #f9f9f9;
        text-align: center;
    }

    .input-field {
        width: 100%;
        padding: 10px;
        margin-bottom: 15px;
        border-radius: 5px;
        border: 1px solid #ddd;
    }

    .btn {
        width: 100%;
        padding: 10px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .btn:hover {
            background-color: #0056b3;
        }

    .error {
        color: red;
        margin-top: 10px;
    }

    .success {
        color: green;
        margin-top: 10px;
    }

    .title {
        text-align: center;
        margin-bottom: 20px;
    }
</style>

@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private string? errorMessage;
    private string? successMessage;

    private async Task RegisterUser()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "Username and password are required.";
            successMessage = null;
            return;
        }

        try
        {
            Console.WriteLine("RegisterUser method called");
            var client = new MongoClient("");
            var database = client.GetDatabase("UserDB");
            var collection = database.GetCollection<User>("Users");

            Console.WriteLine("Database connected successfully");

            
            var existingUser = await collection.Find(u => u.Username == username).FirstOrDefaultAsync();
            if (existingUser != null)
            {
                errorMessage = "User already exists. Please choose a different username.";
                successMessage = null;
            }
            else
            {
                var user = new User { Username = username, Password = password };
                await collection.InsertOneAsync(user);
                successMessage = "User registered successfully!";
                errorMessage = null;

                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            successMessage = null;
        }
    }

    public class User
    {
        public MongoDB.Bson.ObjectId Id { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }
}
